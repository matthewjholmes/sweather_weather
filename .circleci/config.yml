version: 2.1 # Use 2.1 to enable using orbs and other features.

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/orb-intro/
orbs:
  ruby: circleci/ruby@1.0
  node: circleci/node@2

jobs:
  build: # our first job, named "build"
    docker:
      - image: cimg/ruby:2.7.2-node # use a tailored CircleCI docker image.
        auth:
          username: matthewjholmes
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout # pull down our git code.
      - ruby/install-deps # use the ruby orb to install dependencies
      # use the node orb to install our packages
      # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
      # learn more: https://circleci.com/docs/2.0/caching/


  test:  # our next job, called "test"
    # we run "parallel job containers" to enable speeding up our tests;
    # this splits our tests across multiple containers.
    parallelism: 3
    # here we set TWO docker images.
    docker:
      - image: cimg/ruby:2.7.2-node # this is our primary docker image, where step commands run.
        auth:
          username: matthewjholmes
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
      - image: cimg/postgres:14.0
        auth:
          username: matthewjholmes
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
        environment: # add POSTGRES environment variables.
          POSTGRES_USER: postgres
          POSTGRES_DB: sweather_weather_test
          POSTGRES_PASSWORD: ""
    # environment variables specific to Ruby/Rails, applied to the primary container.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: circleci-demo-ruby
      PGPASSWORD: ""
      RAILS_ENV: test
    # A series of steps to run, some are similar to those in "build".
    steps:
      - checkout
      - ruby/install-deps
      # Here we make sure that the secondary container boots
      # up before we run operations on the database.
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      # Run rspec in parallel
      - ruby/rspec-test

# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - build         # Run build first.
      - test:         # Then run test,
          requires:   # Test requires that build passes for it to run.
            - build   # Finally, run the build job.
# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/2.0/configuration-reference
# version: 2.1
#
# # Define a job to be invoked later in a workflow.
# # See: https://circleci.com/docs/2.0/configuration-reference/#jobs
# jobs:
#   say-hello:
#     # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
#     # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
#     docker:
#       - image: cimg/base:stable
#     # Add steps to the job
#     # See: https://circleci.com/docs/2.0/configuration-reference/#steps
#     steps:
#       - checkout
#       - run:
#           name: "Say hello"
#           command: "echo Hello, World!"
#
# # Invoke jobs via workflows
# # See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# workflows:
#   say-hello-workflow:
#     jobs:
#       - say-hello
# Â© 2022 GitHub, Inc.
# Terms
# Privacy
# Security
# Status
# Docs
# Contact GitHub
# Pricing
# API
# Training
# Blog
# About
# Loading complete
#
# version: 2.1
# orbs:
#   ruby: circleci/ruby@0.1.2
#
# jobs:
#   build:
#     docker:
#       - image: circleci/ruby:2.7.2-stretch-node
#         environment:
#           # PGHOST: 127.0.0.1
#           PGHOST: localhost
#           PGUSER: sweather_weather
#           RAILS_ENV: test
#           REDIS_URL: redis://redis@localhost:6379
#       - image: circleci/postgres:13
#         environment:
#           POSTGRES_USER: sweather_weather
#           POSTGRES_DB: sweather_weather_test
#           POSTGRES_PASSWORD: ""
#           # POSTGRES_HOST_AUTH_METHOD=trust
#       - image: circleci/redis:latest
#     executor: ruby/default
#     # environment:
#     #   key: ENV['key']
#     #   appid: ENV['appid']
#     #   api_key: ENV['api_key']
#     steps:
#       - checkout
#       # Setup the environment
#       - run: gem install bundler:2.2.15
#       - run: bundle config set --local path 'Users/matthewholmes/turing/mod_3/projects/sweather_weather' # is this supposed to start with just turing on to the right?
#       - run: bundle install --path "Users/matthewholmes/turing/mod_3/projects/sweather_weather"
#       # DB Wait
#       - run:
#           name: Wait for DB
#           command: dockerize -wait tcp://localhost:5432 -timeout 1m
#       # # Redis Wait
#       - run:
#           name: Wait for Redis
#           command: dockerize -wait tcp://localhost:6379 -timeout 1m
#       # Run the test suite
#       - run: bundle exec rails db:create
#       - run: bundle exec rails db:schema:load
#       - run: bundle exec rspec# version 2.1
# # jobs:
# #   build:
# #     docker:
# #       - image: alpine:3.7
# #     steps:
# #       - run:
# #           name: The First Step
# #           command: |
# #             echo 'Hello World!'
# #             echo 'This is the delivery pipeline'
# # default: &default
# #   adapter: postgresql
# #   encoding: unicode
# #   pool: <%= ENV['DB_POOL'] %>
# #   username: <%= ENV['DB_USERNAME'] %>
# #   password: <%= ENV['DB_PASSWORD'] %>
# #   host: <%= ENV['DB_HOST'] %>
# #   port: 5432
# #
# # development:
# #   <<: *default
# #   database: sweather_weather_development
# #
# # test:
# #   <<: *default
# #   database: sweather_weather_test
# #
# # production:
# #   <<: *default
# #   database: sweather_weather_production
